apiVersion: apps/v1
kind: Deployment
metadata:
  name: lightweight-filter
  namespace: moderation-system
  labels:
    app.kubernetes.io/name: lightweight-filter
    app.kubernetes.io/component: filter
spec:
  replicas: 2
  selector:
    matchLabels:
      app.kubernetes.io/name: lightweight-filter
  template:
    metadata:
      labels:
        app.kubernetes.io/name: lightweight-filter
        app.kubernetes.io/component: filter
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8001"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: moderation-service-account
      # Deploy to your custom nodepool
      nodeSelector:
        owner: "data-engineer"
      tolerations:
      - key: "dedicated"
        operator: "Equal"
        value: "custom-workload"
        effect: "NoSchedule"
      containers:
      - name: lightweight-filter
        image: your-registry/lightweight-filter:latest  # Replace with your image
        ports:
        - containerPort: 8001
          name: http
        env:
        - name: LOG_LEVEL
          valueFrom:
            configMapKeyRef:
              name: moderation-config
              key: log-level
        - name: RATE_LIMIT_PER_USER
          valueFrom:
            configMapKeyRef:
              name: moderation-config
              key: rate-limit-per-user
        - name: RATE_LIMIT_WINDOW
          valueFrom:
            configMapKeyRef:
              name: moderation-config
              key: rate-limit-window
        - name: ENABLE_LIGHTWEIGHT_FILTER
          valueFrom:
            configMapKeyRef:
              name: moderation-config
              key: enable-lightweight-filter
        - name: REDIS_URL
          value: "redis://redis-service:6379/0"
        volumeMounts:
        - name: filter-config
          mountPath: /app/config
          readOnly: true
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8001
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
        readinessProbe:
          httpGet:
            path: /health
            port: 8001
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
      volumes:
      - name: filter-config
        configMap:
          name: filter-config
